-- ======================================================================
-- DATA EXPLORATION
-- ======================================================================

-- Explore All Objects in the Database.
SELECT * FROM INFORMATION_SCHEMA.TABLES


-- Explore All Columns in the Database.
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'

-- ======================================================================
-- DIMENSIONS EXPLORATION
-- ======================================================================

-- Explore all countries our customers come from.
SELECT DISTINCT country FROM gold.dim_customers

-- Explore all categories "The major Divisions".
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1,2,3

-- ======================================================================
-- DATE EXPLORATION
-- ======================================================================

-- Find the date of the first and last order.
-- How many years of sales are available. 
SELECT 
	MIN(order_date) AS first_order_date,
	MAx(order_date) AS last_order_date,
	DATEDIFF(year, MIN(order_date), MAx(order_date)) AS years_of_sales, 
	DATEDIFF(month, MIN(order_date), MAx(order_date)) AS month_of_sales 
FROM gold.fact_sales

-- Find the youngest and oldest customer
SELECT
	MIN(birthdate) AS oldest_customer,
	DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_customer_age,
	MAX(birthdate) AS youngest_customer,
	DATEDIFF(year, MAX(birthdate), GETDATE()) AS youngest_customer_age
FROM gold.dim_customers

-- ======================================================================
-- MEASURES EXPLORATION
-- ======================================================================
-- Find the Total Sales
-- Find how many items are sold
-- Find the avg selling price
-- Find the Total No. of Orders
-- Find the Total No. of Products
-- Find the Total No. of Customers
-- Find the Total No. of customers that has placed an order.
SELECT
	SUM (sales_amount) AS total_sales,
	SUM (quantity) AS total_items_sold,
	AVG (price) AS avg_selling_price,
	COUNT(DISTINCT order_number) AS total_orders_distinct
FROM gold.fact_sales
--------------------------------
SELECT 
	COUNT(product_name) AS total_products
FROM gold.dim_products
--------------------------------
SELECT
	COUNT(customer_key) AS total_customers
FROM gold.dim_customers
--------------------------------
SELECT
	COUNT(DISTINCT customer_key) AS total_customers_placed_orders
FROM gold.fact_sales

--Generate a Report that shows all key metrics of the business.
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' AS measure_name, AVG(price) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Total Nr. of Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. of Products' AS measure_name, COUNT(product_name) AS measure_value FROM gold.dim_products
UNION ALL 
SELECT 'Total Nr. of Customers' AS measure_name, COUNT(customer_key) AS measure_value FROM gold.dim_customers
UNION ALL 
SELECT 'Total Nr. of Customers placed an Order/s' AS measure_name, COUNT(DISTINCT customer_key) AS measure_value FROM gold.fact_sales

-- ======================================================================
-- MAGNITUDE ANALYSIS
-- ======================================================================
-- Total Customers by Countries
SELECT      
	country,
	COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY COUNT(customer_key) DESC

-- Total Customers by Gender
SELECT      
	gender,
	COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC

-- Total Products by Category
SELECT      
	category,
	COUNT(product_name) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC

-- Avg Costs in each Category
SELECT      
	category,
	AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC

-- Total revenue generated for each Category
SELECT      
	pro.category,
	SUM(sal.sales_amount) AS total_revenue
FROM gold.fact_sales sal
LEFT JOIN gold.dim_products pro
ON pro.product_key = sal.product_key
GROUP BY pro.category
ORDER BY total_revenue DESC

-- Total revenue generated by each Customer
SELECT      
	cus.customer_key,
	cus.first_name,
	cus.last_name,
	SUM(sal.sales_amount) AS total_revenue
FROM gold.fact_sales sal
LEFT JOIN gold.dim_customers cus
ON cus.customer_key = sal.customer_key
GROUP BY 
	cus.customer_key,
	cus.first_name,
	cus.last_name
ORDER BY total_revenue DESC

-- Distribution of Sold items across Countries
SELECT
	cus.country,
	SUM(sal.quantity) AS total_sold_items
FROM gold.fact_sales sal
LEFT JOIN gold.dim_customers cus
ON cus.customer_key = sal.customer_key
GROUP BY cus.country
ORDER BY total_sold_items DESC

-- ======================================================================
-- RANKING ANALYSIS
-- ======================================================================
-- Top 5 products generate the Highest Revenue
SELECT TOP 5    
	pro.product_name,
	SUM(sal.sales_amount) AS total_revenue
FROM gold.fact_sales sal
LEFT JOIN gold.dim_products pro
ON pro.product_key = sal.product_key
GROUP BY pro.product_name
ORDER BY total_revenue DESC

--(using Ranking and Window Function -- especially for complex query) 
SELECT  * FROM (
	SELECT 
		pro.product_name,
		SUM(sal.sales_amount) AS total_revenue,
		ROW_NUMBER() OVER(ORDER BY SUM(sal.sales_amount) DESC) AS rank_products
	FROM gold.fact_sales sal
	LEFT JOIN gold.dim_products pro
	ON pro.product_key = sal.product_key
	GROUP BY pro.product_name)t
WHERE rank_products <= 5

-- Top 5 worst-performing products in terms of sales.
SELECT TOP 5    
	pro.product_name,
	SUM(sal.sales_amount) AS total_revenue
FROM gold.fact_sales sal
LEFT JOIN gold.dim_products pro
ON pro.product_key = sal.product_key
GROUP BY pro.product_name
ORDER BY total_revenue 
